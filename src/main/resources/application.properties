# Propeties that holds senestive data shoul be placed as system environment varaibles at server where the application is running.
spring.application.name=spring-boot-microservice-template
server.servlet.application-display-name=spring-boot-microservice-template

spring.security.user.name=my-service-name
spring.security.user.password=change-me
spring.security.user.roles=USER

server.use-forward-headers=true
swagger.ui.enabled=true

# Using ssl configuration means the application no longer supports a plain HTTP connector at server port
# SSL Configuration, Support only SSL 1.2, Disabled
# ----------------------
server.port=9999
# Use system variable
server.ssl.enabled=true
server.ssl.key-store=${SERVER_IDENTITY_KEYSTORE_PATH}
server.ssl.key-store-password=${SERVER_IDENTITY_KEYSTORE_PASS}
server.ssl.key-password=${SERVER_IDENTITY_KEYSTORE_PASS}
server.ssl.key-alias=${SERVER_IDENTITY_KEYSTORE_ALIAS}

# ssl ciphers
# Note! weblogic osb services may have problem using listed chiper suites, suites, so ciphers must be comment out such cases 
server.ssl.ciphers=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256

# ssl protocol to use.
server.ssl.protocol=TLS

# Enabled ssl protocols.
server.ssl.enabled-protocols=TLSv1.2

# managment used by prometheus
management.server.port=9998
management.server.ssl.enabled=false
management.endpoints.web.exposure.include=*
management.endpoint.prometheus.enabled=true
# Turn on/off metrics collection
management.metrics.enable.root=false
# Turn on histogram metrics, metric name http_server_requests_seconds_bucket
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# swagger
springfox.documentation.swagger.v2.path=/api-docs

# Rest client http connection pool
# The maximum number of connections to a particular host
http.connectionpool.max-per-route=200
# The maximum total number of connections in the pool
http.connectionpool.max-threads=200
# The maximum idle timeout for a connection, given in seconds
http.connectionpool.idle-timeout=30

# server settings
# Session timeout. If a duration suffix is not specified, seconds will be used.
server.servlet.session.timeout=60
server.tomcat.connection-timeout=5000
# Maximum queue length for incoming connection requests when all possible request processing threads are in use.
server.tomcat.accept-count=200
# Maximum number of connections that the server accepts and processes at any given time.
server.tomcat.max-connections=200
# Maximum amount of worker threads.
server.tomcat.threads.max=250
#server.tomcat.min-spare-threads=10
# Enable Micrometer metrics for Tomcat
server.tomcat.mbeanregistry.enabled=true

# request log filter
request.log.filter.IncludeQueryString=true
request.log.filter.IncludePayload=false
request.log.filter.MaxPayloadLength=10000
request.log.filter.IncludeHeaders=true
request.log.filter.IncludeClientInfo=true
# performance log endpoint advisor
performance.log.pointcut.expression=execution(public * org.gunnarro.microservice.mymicroservice.*.*(..))

# Microservice datasource
spring.datasource.microservice.url=
spring.datasource.microservice.username=
spring.datasource.microservice.password=
spring.datasource.microservice..driver-class-name=
spring.datasource.microservice..configuration.maximum-pool-size=2
spring.datasource.microservice..configuration.connection-timeout=5000
spring.datasource.microservice..configuration.maxLifetime=1800000

# JDBC Logging
logging.level.jdbc.resultsettable=error
logging.level.jdbc.sqltiming=error
logging.level.jdbc.sqlonly=error
logging.level.jdbc.audit=fatal
logging.level.jdbc.resultset=error
logging.level.jdbc.connection=fatal

#log4jdbc.dump.sql.addsemicolon=true
log4jdbc.dump.sql.maxlinelength=0
log4jdbc.trim.sql.extrablanklines=false

# Rest client security settings
# FIXME use same keystor for all as default, rest client keystor must be created when needed
rest.client.trust.keystore=${SERVER_IDENTITY_KEYSTORE_PATH}
rest.client.trust.keystore.password=${SERVER_IDENTITY_KEYSTORE_PASS}
rest.client.client.keystore=${SERVER_IDENTITY_KEYSTORE_PATH}
rest.client.client.keystore.password=${SERVER_IDENTITY_KEYSTORE_PASS}

rest.client.connect.timeout=5000
rest.client.read.timeout=10000